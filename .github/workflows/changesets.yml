---
name: Changesets

on:
  push:
    branches:
      - '*.x'
    paths:
      - '.changeset/**'
  workflow_dispatch:

# These permissions are needed to interact with GitHub's API
permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18'
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --prefer-offline || yarn install

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: yarn release
          title: 'Version Packages'
          commit: 'Version Packages'
        env:
          # Using a Personal Access Token with appropriate permissions instead of the default token
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build Storybook
        if: steps.changesets.outputs.published == 'true'
        run: yarn build-storybook

      - name: Upload Storybook artifacts
        if: steps.changesets.outputs.published == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static/
          retention-days: 1

      - name: Download Storybook artifacts
        if: steps.changesets.outputs.published == 'true'
        uses: actions/download-artifact@v4
        with:
          name: storybook-static
          path: storybook-static/

      - name: Deploy to GitHub Pages
        if: steps.changesets.outputs.published == 'true'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: storybook-static
          branch: gh-pages

      - name: Create Git Tag
        if: steps.changesets.outputs.published == 'true'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Merge changes to main (for non-breaking changes)
        if: steps.changesets.outputs.published == 'true'
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git merge --ff-only origin/$(echo $GITHUB_REF | sed 's/refs\/heads\///') || echo "Manual merge required - likely breaking changes"
          git push origin main || echo "Could not push to main - manual merge required"
        continue-on-error: true
