---
name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, '*.x']
  push:
    branches: [main, '*.x']
    tags: ['v*']
  workflow_dispatch:

# Restrict permissions to minimum required
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  preparation:
    name: Environment Preparation
    uses: ./.github/workflows/setup.yml

  lint:
    name: Code Quality
    needs: preparation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18'
          cache: 'yarn'

      - name: Cache dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline || yarn install

      - name: Lint code
        run: yarn lint

      - name: Type check
        run: yarn check

  build:
    name: Build
    needs: preparation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18'
          cache: 'yarn'

      - name: Cache dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline || yarn install

      - name: Build package
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  unit_tests:
    name: Unit Tests
    needs: [preparation, build]
    uses: ./.github/workflows/vitest.yml
    with:
      node-version: '20.18'

  e2e_tests:
    name: E2E Tests
    needs: [preparation, build]
    uses: ./.github/workflows/e2e-tests.yml
    with:
      node-version: '20.18'

  code_coverage:
    name: Code Coverage
    needs: [unit_tests, e2e_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --prefer-offline || yarn install

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          pattern: unit-test-results-*
          path: coverage/
          merge-multiple: true

      - name: Download E2E test coverage
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: coverage/
          merge-multiple: true
        continue-on-error: true

      - name: Check directory structure
        run: |
          echo "Unit test coverage structure:"
          find coverage -type f -name "coverage-final.json" | sort

          echo "E2E test coverage structure:"
          find coverage -type f -name "coverage-final.json" -path "*/e2e-coverage/*" | sort

          echo "Monocart coverage structure:"
          find coverage -type f -name "coverage-report.json" | sort
          find coverage -type f -name "lcov.info" | sort

      - name: Install NYC dependencies
        run: |
          yarn add -D @istanbuljs/nyc-config-typescript
          yarn add -D istanbul-lib-coverage istanbul-lib-report istanbul-reports

      # Ensure unit test coverage is always available
      - name: Generate fallback unit coverage if needed
        run: |
          if [ ! -f "coverage/coverage-final.json" ]; then
            echo "Warning: Unit test coverage not found, running unit tests with coverage"
            yarn test:unit --coverage
          fi

      # Now process E2E coverage
      - name: Process E2E coverage
        run: node convert-coverage.js

      - name: Merge coverage reports
        run: node merge-coverage.js

      # Verify lcov content before upload
      - name: Verify coverage data
        run: |
          echo "LCOV content summary:"
          grep -c "SF:" coverage/lcov.info || echo "No SF entries found"

          # Check if it only contains the placeholder file
          if [ $(grep -c "SF:" coverage/lcov.info) -eq 1 ] && grep -q "placeholder.js" coverage/lcov.info; then
            echo "WARNING: Coverage only contains the placeholder file!"

            # Rerun unit tests with coverage if needed
            echo "Re-running unit tests with coverage to ensure proper reporting"
            yarn test:unit --coverage
            node merge-coverage.js
          fi

      # Upload coverage to QLTY.sh with tags that match the Luijten branching strategy:
      # - Version branches (*.x): version-{branch}-coverage (e.g., version-0.x-coverage)
      # - Main branch (next major version): next-major-coverage
      # - Other branches: {branch}-coverage
      # - Tags: release-{tag}-coverage
      # - PRs: pr-coverage
      - name: Upload coverage to qlty.sh
        uses: qltysh/qlty-action/coverage@main
        with:
          coverage-token: ${{ secrets.QLTY_TOKEN }}
          files: coverage/lcov.info
          tag: >-
            ${{
              contains(github.ref, 'refs/heads/') && 
                (endsWith(github.ref_name, '.x') && format('version-{0}-coverage', github.ref_name) || 
                 github.ref_name == 'main' && 'next-major-coverage' || 
                 format('{0}-coverage', github.ref_name)) || 
              contains(github.ref, 'refs/tags/') && format('release-{0}-coverage', github.ref_name) || 
              'pr-coverage' 
            }}
